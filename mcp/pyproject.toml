[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "camera-mcp"
version = "0.1.0"
description = "基于 Model Context Protocol 的摄像头控制系统"
authors = [
    {name = "VLM Monitor Team", email = "admin@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
keywords = ["mcp", "camera", "control", "ai", "computer-vision"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Video",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "mcp>=1.0.0",
    "openai>=1.0.0",
    "requests>=2.25.0",
    "opencv-python>=4.5.0",
    "asyncio-mqtt>=0.11.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-asyncio>=0.18.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "mypy>=0.910",
    "ruff>=0.1.0",
]

test = [
    "pytest>=6.0",
    "pytest-asyncio>=0.18.0",
    "pytest-cov>=4.0.0",
]

[project.scripts]
camera-mcp-server = "camera_mcp.cores.camera_server:main"
camera-mcp-client = "camera_mcp.cores.camera_client:main"
camera-mcp-inference = "camera_mcp.cores.camera_inference_service:main"
camera-mcp = "camera_mcp.cli:cli_main"

[project.urls]
Homepage = "https://github.com/vlm-monitor/camera-mcp"
Repository = "https://github.com/vlm-monitor/camera-mcp.git"
Documentation = "https://github.com/vlm-monitor/camera-mcp#readme"
"Bug Tracker" = "https://github.com/vlm-monitor/camera-mcp/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/camera_mcp"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/config.json",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
] 